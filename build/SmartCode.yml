Module: Permission
Author: cnzhang
DataSource:
  Name: DbTable
  Parameters:
    DbName: permission
    DbProvider: SqlServer
    ConnectionString: Data Source=.;Initial Catalog=permission;Integrated Security=True
Language: CSharp
TemplateEngine:
  Name: Razor
  Root: CSharp
Output:
  Type: File
  Path: 'd:\workspace\permission'
Parameters:
  SmartSqlVersion: "4.1.50"
  SmartSqlSchemaVersion: "4.1.30"
  BuildDir: 'd:\workspace\permission\build'
  DockerImage: "permission"

NamingConverter:
  Table:
    Tokenizer:
      Type: Default
      Parameters:
        IgnorePrefix: "T_"
        Delimiter: "_"
    Converter:
      Type: Pascal
      Parameters: {}
  View:
    Tokenizer:
      Type: Default
      Parameters:
        IgnorePrefix: "V_"
        Delimiter: "_"
    Converter:
      Type: Pascal
  Column:
    Tokenizer:
      Type: Default
      Parameters:
        Delimiter: "_"
        UppercaseSplit: false
    Converter:
      Type: Pascal

# 构建任务
Build:
  #  ClearDir:
  #    Type: Clear
  #    Parameters:
  #      Dirs: '.'

  MakeBuildDir:
    Type: Process
    Parameters:
      FileName: powershell
      Args: mkdir '{{Project.Parameters.BuildDir}}'
  Copy:
    Type: Process
    Parameters:
      FileName: powershell
      Args: cp '{{Project.ConfigPath}}' '{{Project.Parameters.BuildDir}}'

  Scaffolding:
    Type: MultiTemplate
    Output:
      Path: "."
    Parameters:
      Templates:
        [
          {
            Key: "Sln.cshtml",
            Output: { Name: "{{Project.Module}}", Extension: ".sln" },
          },
          {
            Key: "Sln-Directory.Build.cshtml",
            Output: { Name: "Directory.Build", Extension: ".props" },
          },
          {
            Key: "Sln-Version.cshtml",
            Output: { Path: "build", Name: "version", Extension: ".props" },
          },
          {
            Key: "Sln-Dockerfile.cshtml",
            Output: { Name: "Dockerfile", Extension: "" },
          },
          {
            Key: "Sln-DockerIgnore.cshtml",
            Output: { Name: ".dockerignore", Extension: "" },
          },
          {
            Key: "Sln-GitIgnore.cshtml",
            Output: { Name: ".gitignore", Extension: "" },
          },
          {
            Key: "Proj-Entity.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.Entity",
                Name: "{{Project.Module}}.Entity",
                Extension: ".csproj",
              },
          },
          {
            Key: "Proj-Repository.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.Repository",
                Name: "{{Project.Module}}.Repository",
                Extension: ".csproj",
              },
          },
          {
            Key: "Proj-Service.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.Service",
                Name: "{{Project.Module}}.Service",
                Extension: ".csproj",
              },
          },
          {
            Key: "Proj-API.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API",
                Name: "{{Project.Module}}.API",
                Extension: ".csproj",
              },
          },
          {
            Key: "API/LaunchSettings.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Properties",
                Name: "launchSettings",
                Extension: ".json",
              },
          },
          {
            Key: "API/AppSettings.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API",
                Name: "appsettings",
                Extension: ".json",
              },
          },
          {
            Key: "API/AppSettings-Development.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API",
                Name: "appsettings.Development",
                Extension: ".json",
              },
          },
          {
            Key: "API/Program.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API",
                Name: "Program",
                Extension: ".cs",
              },
          },
          {
            Key: "API/Startup.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API",
                Name: "Startup",
                Extension: ".cs",
              },
          },
          {
            Key: "API/APIException.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Exceptions",
                Name: "APIException",
                Extension: ".cs",
              },
          },
          {
            Key: "API/GlobalExceptionFilter.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Filters",
                Name: "GlobalExceptionFilter",
                Extension: ".cs",
              },
          },
          {
            Key: "API/GlobalValidateModelFilter.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Filters",
                Name: "GlobalValidateModelFilter",
                Extension: ".cs",
              },
          },
          {
            Key: "API/QueryRequest.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "QueryRequest",
                Extension: ".cs",
              },
          },
          {
            Key: "API/QueryByPageRequest.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "QueryByPageRequest",
                Extension: ".cs",
              },
          },
          {
            Key: "API/ResponseMessage.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "ResponseMessage",
                Extension: ".cs",
              },
          },
          {
            Key: "API/QueryResponse.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "QueryResponse",
                Extension: ".cs",
              },
          },
          {
            Key: "API/QueryByPageResponse.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "QueryByPageResponse",
                Extension: ".cs",
              },
          },
          {
            Key: "API/ResponseMessage.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.API/Messages",
                Name: "ResponseMessage",
                Extension: ".cs",
              },
          },
          {
            Key: "SqlMapConfig.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.Repository",
                Name: "SmartSqlMapConfig",
                Extension: ".xml",
              },
          },
          {
            Key: "SqlMapConfig.cshtml",
            Output:
              {
                Path: "src/{{Project.Module}}.Repository",
                Name: "SmartSqlMapConfig.Development",
                Extension: ".xml",
              },
          },
        ]

  Entity:
    Type: Table
    Module: Entity
    TemplateEngine:
      Path: Entity.cshtml
    Output:
      Path: "src/{{Project.Module}}.{{Build.Module}}"
      Name: "{{Items.CurrentTable.ConvertedName}}"
      Extension: ".cs"

  Repository:
    Type: Table
    Module: Repository
    TemplateEngine:
      Path: Repository.cshtml
    IgnoreNoPKTable: true
    IgnoreView: true
    Output:
      Path: "src/{{Project.Module}}.{{Build.Module}}"
      Name: "I{{Items.CurrentTable.ConvertedName}}Repository"
      Extension: .cs

  Service:
    Type: Table
    Module: Service
    TemplateEngine:
      Path: Service.cshtml
    IgnoreNoPKTable: true
    IgnoreView: true
    Output:
      Path: "src/{{Project.Module}}.{{Build.Module}}"
      Name: "{{Items.CurrentTable.ConvertedName}}Service"
      Extension: .cs

  APIController:
    Type: Table
    Module: API
    TemplateEngine:
      Path: API/APIController.cshtml
    IgnoreNoPKTable: true
    IgnoreView: true
    Output:
      Path: "src/{{Project.Module}}.{{Build.Module}}/Controllers"
      Name: "{{Items.CurrentTable.ConvertedName}}Controller"
      Extension: .cs

  SqlMap:
    Type: Table
    TemplateEngine:
      Path: SqlMap.cshtml
    Output:
      Path: "src/{{Project.Module}}.Repository/Maps"
      Name: "{{Items.CurrentTable.ConvertedName}}"
      Extension: .xml
    IgnoreNoPKTable: true
    IgnoreView: true

  # Please install dotnet-format first!
  # dotnet tool install -g dotnet-format
  CodeFormat:
    Type: Process
    Parameters:
      FileName: powershell
      WorkingDirectory: "{{Project.Output.Path}}"
      Args: dotnet-format

  ReStore:
    Type: Process
    Parameters:
      FileName: powershell
      WorkingDirectory: "{{Project.Output.Path}}"
      Args: dotnet restore
#  BuildDocker:
#    Type: Process
#    Parameters:
#      FileName: powershell
#      WorkingDirectory: '{{Project.Output.Path}}'
#      Args: docker build -t {{Project.Parameters.DockerImage}}:v1.0.0 .

#  RunDocker:
#    Type: Process
#    Parameters:
#      FileName: powershell
#      WorkingDirectory: '{{Project.Output.Path}}'
#      Args: docker run --name {{Project.Parameters.DockerImage}} --rm -d -p 8008:80 {{Project.Parameters.DockerImage}}:v1.0.0 .

# Publish:
#  Type: Process
#  Parameters:
#    FileName: powershell
#    WorkingDirectory: '{{Project.Output.Path}}'
#    Args: dotnet publish -c Release -o '{{Project.Output.Path}}\publish'

# Run:
#  Type: Process
#  Parameters:
#    FileName: powershell
#    WorkingDirectory: '{{Project.Output.Path}}\publish'
#    CreateNoWindow: false
#    RedirectStandardOutput: false
#    RedirectStandardError: false
#    WaitForExit: false
#    WriteLines: ['dotnet {{Project.Module}}.API.dll']

# RunChrome:
#  Type: Process
#  Parameters:
#    FileName: C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
#    CreateNoWindow: false
#    Args: http://localhost:8008/swagger
